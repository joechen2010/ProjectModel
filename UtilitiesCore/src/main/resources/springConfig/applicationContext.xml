<?xml version="1.0" encoding="UTF-8"?>
	

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:jms="http://www.springframework.org/schema/jms" xsi:schemaLocation=" 

		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd

		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd

		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd

		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd

		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd

		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-2.5.xsd

		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd">


	<!-- ==================================================================== -->
	<!-- TRANSACTION AOP and ANNOTATION SUPPORT                               -->
	<!-- ==================================================================== -->
	<aop:aspectj-autoproxy/>
	<tx:annotation-driven transaction-manager="springJtaTransactionManager"/>

	
	<!-- ===================================================== -->
	<!-- ==== TRANSACTION MANAGER CONFIG ===================== -->
	<!-- ===================================================== -->

	<!-- Construct Atomikos UserTransactionManager, needed to configure Spring -->
	<bean id="atomikosTransactionManager" 
		class="com.atomikos.icatch.jta.UserTransactionManager" 
		init-method="init" destroy-method="close">
		<!--  when close is called, should we force transactions to terminate or not? -->
		<property name="forceShutdown" value="false"/>
	</bean>
	
	<!-- Also use Atomikos UserTransactionImp, needed to configure Spring  --> 
	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
	    <property name="transactionTimeout" value="300"/>
	</bean>
	
	<!-- Configure the Spring framework to use JTA transactions from Atomikos -->
	<bean id="springJtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager"><ref bean="atomikosTransactionManager"  /></property>
		<property name="userTransaction"><ref bean="atomikosUserTransaction"  /></property>
		<property name="allowCustomIsolationLevels" value="true"/>
	</bean>

	<!-- ==================================================================== -->
	<!-- Application Property Loader                                          -->
	<!-- ==================================================================== -->
	<bean id="propertyConfigurer" class="com.joe.utilities.core.configuration.spring.GlobalPropertyPlaceholderConfigurer">
	</bean>

	<!-- ==================================================================== -->
	<!-- Resource Bundle Access                                               -->
	<!-- ==================================================================== -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<value>messages/messages_en.properties</value>
		</property>
		
		<!-- This requires that all messages escape single quotes (aka apostrophes) with a second single quote ('').  This is necessary
		     to avoid flaky Spring issue in which sometimes escaping worked and sometimes did not. -->
		<property name="alwaysUseMessageFormat" value="true"/>
	</bean>

	<!-- ==================================================================== -->
	<!-- DataSource Factory                                                   -->
	<!-- ==================================================================== -->
	<bean id="dataSourceFactory" class="com.joe.utilities.core.configuration.DataSourceFactory" factory-method="getInstance" destroy-method="clearInstance">
	</bean>


	<!-- ==================================================================== -->
	<!-- DataSource                                                           -->
	<!-- ==================================================================== -->
	<bean id="alineoDataSource" factory-bean="dataSourceFactory" factory-method="getDataSource">
		<constructor-arg value="alineoDataSource"/>
	</bean>

	
	<!-- ==================================================================== -->
	<!-- Spring JdbcTemplate.			                                      -->
	<!-- ==================================================================== -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="alineoDataSource"/>
		</property>
	</bean>


	<!-- ==================================================================== -->
	<!-- Hibernate Factory                                                    -->
	<!-- ==================================================================== -->
	<bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" destroy-method="destroy">
		<property name="mappingLocations">
			<list>
 				<value>classpath*:/HibernateMappingFiles/*.hbm.xml</value>
 				
 			</list>
		</property>
		<property name="hibernateProperties">
			<props>      
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.connection.isolation">3</prop>
				<prop key="hibernate.cache.provider_class">com.joe.utilities.core.oscache.OSCacheProvider</prop>
				<prop key="hibernate.current_session_context_class">jta</prop>
				<prop key="hibernate.transaction.factory_class">com.atomikos.icatch.jta.hibernate3.AtomikosJTATransactionFactory</prop>
	            <prop key="hibernate.transaction.manager_lookup_class">com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup</prop>	
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop> 
 			</props>      
		</property>
		<property name="dataSource">
			<ref bean="alineoDataSource"/>
		</property>
	
	</bean>
	
	
	
	<!-- ==================================================================== -->
	<!-- Spring Hibernate Template                                            -->
	<!-- ==================================================================== -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="hibernateSessionFactory"/>
	</bean>

	
	<!-- ==================================================================== -->
	<!-- Hibernate Transaction Manager                                        -->
	<!-- ==================================================================== -->
	<bean id="hibernateTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="hibernateSessionFactory"/>
	</bean>

	<!-- ==================================================================== -->
	<!-- Hibernate Transaction Template                                       -->
	<!-- ==================================================================== -->
	<bean id="hibernateTransactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager">
			<ref bean="hibernateTransactionManager"/>
		</property>
	</bean>

	<!-- ==================================================================== -->
	<!-- Default Autoproxy Creator                                                  -->
	<!-- ==================================================================== -->
	<bean id="autoproxy" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
	</bean>

	<!-- ==================================================================== -->
	<!-- Transaction Attribute Source                                         -->
	<!-- ==================================================================== -->
	
	<bean id="transactionAttributeSource" class="org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource">
	</bean>
	
	<!-- ==================================================================== -->
	<!-- JMX                                                                  -->
	<!-- ==================================================================== -->
	<bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
		<property name="locateExistingServerIfPossible" value="true"/>
	</bean>    
	
	<bean id="jmxAttributeSource" class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>
    
      <bean id="annotationsAssembler" class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">  
       	<property name="attributeSource" ref="jmxAttributeSource"/>  
   	</bean>  
   	
   	<bean id="namingStrategy" class="org.springframework.jmx.export.naming.MetadataNamingStrategy">  
        <property name="attributeSource" ref="jmxAttributeSource"/>  
   	</bean>

      <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
	    <property name="server" ref="mbeanServer"/>
	    <property name="assembler" ref="annotationsAssembler"/>
	    <property name="namingStrategy" ref="namingStrategy"/>
	    <property name="beans">
			<map>
				<entry key="bean:name=statistics" value-ref="statisticsBean" />
			</map>
		</property>
      </bean>
      
      <bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
		<property name="port" value="1000" />
	 </bean>
	 
	 <bean id="statisticsBean" class="org.hibernate.jmx.StatisticsService">
		<property name="sessionFactory" ref="hibernateSessionFactory" />
	</bean>
	 
	 <bean id="clientConnector" class="org.springframework.jmx.support.ConnectorServerFactoryBean">
		<property name="objectName" value="connector:name=rmi" />
		<property name="serviceUrl" value="service:jmx:rmi://localhost/jndi/rmi://localhost:1000/myconnector" />
	</bean>

</beans>